/**
 * üîó API ‚Äì Communication avec Google Apps Script
 * ------------------------------------------------------------
 *  Contient :
 *   - fetchQuestions() ‚Üí r√©cup√®re les questions selon le mode
 *   - sendScore() ‚Üí envoie le score final √† la feuille "scores"
 * ------------------------------------------------------------
 */


/**
 * ==============================================
 *  üß© Chargement des questions selon le mode choisi
 * ==============================================
 */
async function fetchQuestions(mode = null) {
  try {
    // 1Ô∏è‚É£ R√©cup√®re le mode s√©lectionn√© ou "general" par d√©faut
    const selectedMode = mode || localStorage.getItem("selectedMode") || "general";

    // 2Ô∏è‚É£ Construit l‚ÄôURL vers ton Google Apps Script
    const url = `${CONFIG.GOOGLE_SCRIPT_URL}?action=getQuestions&sheet=${encodeURIComponent(selectedMode)}`;

    console.log("üåê URL API utilis√©e :", url);

    // 3Ô∏è‚É£ R√©cup√®re les donn√©es
    const response = await fetch(url, { method: "GET", cache: "no-store" });

    if (!response.ok) {
      console.warn(`‚ö†Ô∏è Erreur HTTP (${response.status})`);
      return [];
    }

    const questions = await response.json();

    if (!Array.isArray(questions)) {
      console.warn("‚ö†Ô∏è R√©ponse inattendue :", questions);
      return [];
    }

    console.log(`‚úÖ ${questions.length} questions charg√©es pour le mode "${selectedMode}"`);
    return questions;

  } catch (err) {
    console.error("‚ùå Erreur lors du chargement des questions :", err);
    return [];
  }
}


/**
 * ==============================================
 *  üì§ Envoi du score vers Google Sheets
 * ==============================================
 *  ‚Üí Utilise une requ√™te GET pour contourner le CORS
 *  ‚Üí Donn√©es visibles dans la feuille ‚Äúscores‚Äù
 */
async function sendScore(nom, score, total, mode = "general") {
  try {
    // 1Ô∏è‚É£ Construction de l‚ÄôURL
    const url = `${CONFIG.GOOGLE_SCRIPT_URL}?action=sendScore`
      + `&nom=${encodeURIComponent(nom)}`
      + `&score=${encodeURIComponent(score)}`
      + `&total=${encodeURIComponent(total)}`
      + `&mode=${encodeURIComponent(mode)}`
      + `&_t=${Date.now()}`; // √©vite le cache navigateur

    console.log("üì° Envoi du score via URL :", url);

    // 2Ô∏è‚É£ Appel GET
    const response = await fetch(url, { method: "GET", cache: "no-store" });

    // 3Ô∏è‚É£ V√©rifie la validit√© de la r√©ponse
    let data;
    try {
      data = await response.json();
    } catch (err) {
      console.warn("‚ö†Ô∏è R√©ponse non JSON :", err);
      data = { ok: false, message: "R√©ponse non JSON" };
    }

    // 4Ô∏è‚É£ Log console
    console.log("üì§ Score enregistr√© :", data);

    if (!data.ok) {
      console.warn("‚ö†Ô∏è R√©ponse non valide :", data);
    }

    return data;

  } catch (err) {
    console.error("‚ùå Erreur d‚Äôenvoi du score :", err);
    return { ok: false, error: err.message };
  }
}
