/**
 * üé® Gestion de l'interface et des textes (V2.4)
 * 
 * - Charge les accroches (titres, sous-titres, commentaires finaux)
 * - G√®re le th√®me clair/sombre
 * - Fournit des utilitaires (shuffle, pr√©noms al√©atoires)
 */

let ACCROCHES = {}; // üîπ Stockera les donn√©es du fichier accroches.json


/**
 * üß© Retourne un √©l√©ment al√©atoire dans une liste
 */
function getRandomItem(list) {
  return list[Math.floor(Math.random() * list.length)];
}

/**
 * üé≤ M√©lange un tableau (utile pour les questions / r√©ponses)
 */
function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

/**
 * üë• R√©cup√®re un ensemble de pr√©noms al√©atoires (sauf le bon)
 */
function getRandomNames(exclude) {
  const noms = ["Thomas", "Simon", "Vladimir", "Alexis", "Ludovic", "Sacha", "Maxence", "Le zinc"];
  return noms.filter(n => n !== exclude).sort(() => Math.random() - 0.5).slice(0, 3);
}



/**
 * ======================================================
 *  üß† getCommentaire(pourcentage)
 *  Renvoie la phrase finale selon le score ET le mode
 *  - Lit d‚Äôabord les commentaires du mode actif (localStorage.selectedMode)
 *  - Sinon fallback sur les commentaires racine (compatibilit√©)
 *  - Conserve ta logique de paliers 0/20/40/60/80/100
 * ======================================================
 */
function getCommentaire(pourcentage) {

    // ü©µ Synchronisation de s√©curit√© avec le contenu global charg√©
  if (!ACCROCHES || !Object.keys(ACCROCHES).length) {
    ACCROCHES = window.ACCROCHES || {};
  }
  
  // 1) R√©cup√®re le mode courant (sauvegard√© par le s√©lecteur)
  const modeFromStorage = localStorage.getItem("selectedMode");

  // 2) S√©lectionne la bonne source de commentaires
  //    - d‚Äôabord ceux du mode (si dispo)
  //    - sinon le bloc racine ACCROCHES.commentairesFin
  const byMode = ACCROCHES?.modes?.[modeFromStorage]?.commentairesFin;
  const comments = byMode || ACCROCHES?.commentairesFin || {};

  // 3) S√©curit√©s : si rien trouv√©, on renvoie une phrase par d√©faut
  const keys = Object.keys(comments);
  if (!keys.length) {
    console.warn("‚ö†Ô∏è Aucun commentaire de fin trouv√© pour le mode:", modeFromStorage);
    return "Bravo pour avoir termin√© le quiz !";
  }

  // 4) Convertit les cl√©s ("0","20",...) en nombres tri√©s
  const niveaux = keys
    .map(k => parseInt(k, 10))
    .filter(n => !Number.isNaN(n))
    .sort((a, b) => a - b);

  // 5) Trouve le palier le plus bas <= pourcentage
  let palier = niveaux[0];
  for (let i = 0; i < niveaux.length; i++) {
    if (pourcentage >= niveaux[i]) palier = niveaux[i];
    else break;
  }

  // 6) Renvoie la phrase correspondante (fallback g√©n√©rique si manquante)
  return comments[palier] || "Bravo pour avoir termin√© le quiz !";
}




/**
 * üåó Bascule entre le th√®me clair et sombre
 */
function toggleTheme() {
  const body = document.body;
  const isLight = body.classList.toggle("light");
  const btn = document.getElementById("toggleThemeBtn");
  btn.innerText = isLight ? "Basculer en th√®me sombre" : "Basculer en th√®me clair";
}
