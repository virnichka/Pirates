
// ===============================================
// QUIZ ENTRE POTES ‚Äì main.js (version corrig√©e)
// * üöÄ Point d‚Äôentr√©e unique du quiz
// ===============================================


/* =======================================
   üî§ GESTION DE LA LANGUE DU SITE
   ======================================= */

const SUPPORTED_LANGS = ["fr", "en", "es", "ro"];
const DEFAULT_LANG = "fr";

let lang = localStorage.getItem("lang") ||
           (navigator.language || DEFAULT_LANG).slice(0,2).toLowerCase();
if (!SUPPORTED_LANGS.includes(lang)) lang = DEFAULT_LANG;

window.TEXTS = null;


async function loadTexts() {

  try {
    const res = await fetch("./data/texts.json", { cache: "no-cache" });
    const allTexts = await res.json();
    window.TEXTS = allTexts[lang] || allTexts[DEFAULT_LANG];
    localStorage.setItem("lang", lang);
  } catch (err) {
    console.error("[i18n] Erreur de chargement de texts.json :", err);
  }
}




// ===============================================
// ‚öôÔ∏è INITIALISATION DU SITE
// ===============================================

window.addEventListener("load", async () => {
  try {
    await loadTexts(); // üß© Charge les textes multilingues au d√©marrage

      // Recharge texts.json dans la bonne langue
      if (window.ALL_TEXTS && window.ALL_TEXTS[savedLang]) {
        window.TEXTS = window.ALL_TEXTS[savedLang];
      } else {
        const res = await fetch("./data/texts.json", { cache: "no-cache" });
        const all = await res.json();
        window.ALL_TEXTS = all;
        window.TEXTS = all[savedLang];
      }
     
     // üó£Ô∏è Applique la langue sauvegard√©e au chargement
      const savedLang = localStorage.getItem("lang") || "fr";
      window.currentLang = savedLang;
      
      // Force la mise √† jour des textes localis√©s de l'interface
      if (typeof updateUITexts === "function") {
        updateUITexts();
      }
     
    // 1Ô∏è‚É£ R√©cup√©ration du mode sauvegard√© (ou "general" par d√©faut)
    const savedMode = localStorage.getItem("selectedMode") || "general";

    // 2Ô∏è‚É£ Application du th√®me visuel et des accroches correspondantes
    applyTheme(savedMode);
    await applyAccroches(savedMode);

     // Synchronise le s√©lecteur du mode
      const modeSelect = document.getElementById("themeMode");
      if (modeSelect) {
        modeSelect.value = savedMode;
      }


    // 3Ô∏è‚É£ Chargement des questions selon le mode choisi
    const questions = await fetchQuestions(savedMode);

    // 4Ô∏è‚É£ D√©marrage du quiz
    startQuiz(questions);

    // 5Ô∏è‚É£ Gestion du s√©lecteur de mode (liste d√©roulante)
    const select = document.getElementById("themeMode");
    if (select) {
      // initialise la valeur affich√©e dans la liste
      select.value = savedMode;

      // √©coute le changement de mode
      select.addEventListener("change", async (e) => {
        const modeActuel = localStorage.getItem("selectedMode") || "general";
        const modeDemande = e.target.value;

        // üè¥‚Äç‚ò†Ô∏è Si le mode demand√© est Full Dark, demande un mot de passe
        if (modeDemande === "full_dark") {
          const mdp = prompt("üóùÔ∏è");
          if (mdp !== CONFIG.FULL_DARK_PASS) {
            // üó®Ô∏è Message localis√© depuis texts.json
            const uiTexts = window.TEXTS?.ui || {};
            alert(uiTexts.badPassword || "‚ùå Mot de passe incorrect.");
            
            // üîÅ Retour au mode pr√©c√©dent
            e.target.value = modeActuel;
            return; // stoppe ici, on ne change pas de mode
          }
        }

        // ‚úÖ Si on arrive ici, le mode demand√© est autoris√©
        localStorage.setItem("selectedMode", modeDemande);

        // üîπ 1. D√©sactive temporairement le s√©lecteur pour √©viter plusieurs clics
        select.disabled = true;

        // üîπ 2. Applique le th√®me visuel correspondant
        applyTheme(modeDemande);

        // üîπ 2.5. Affiche un message de chargement pendant la transition de mode
        const quizQuestionEl = document.getElementById("quizQuestion");
        const quizAnswersEl = document.getElementById("quizAnswers");
        const miniCommentEl = document.getElementById("miniCommentaire");

        // üà≥ Message localis√© "chargement du quiz"
         const uiTexts = window.TEXTS?.ui || {};
         const loadingMsg = uiTexts.loading || "- Chargement du quiz -";
         if (quizQuestionEl) quizQuestionEl.innerText = loadingMsg;
        if (quizAnswersEl) quizAnswersEl.innerHTML = "";
        if (miniCommentEl) miniCommentEl.style.display = "none";

        // üí´ Animation de fondu pour le texte
        if (quizQuestionEl) {
          quizQuestionEl.classList.add("fade");
          quizQuestionEl.classList.remove("show");
          setTimeout(() => quizQuestionEl.classList.add("show"), 50);
        }

        // üîπ 3. Met √† jour les accroches (titres/sous-titres)
        await applyAccroches(modeDemande);

        // üîπ 4. Recharge les questions du bon mode
        const newQuestions = await fetchQuestions(modeDemande);

        // üîπ 5. Red√©marre le quiz avec les nouvelles questions
        if (newQuestions && newQuestions.length > 0) {
          startQuiz(newQuestions);
        } else {
          document.getElementById("quizQuestion").innerText =
            "Aucune question trouv√©e pour ce mode.";
        }

        // üîπ 6. R√©active le s√©lecteur apr√®s le chargement
        select.disabled = false;
      }); // <-- fermeture du addEventListener
    } // <-- fermeture du if (select)
  } catch (err) {
    console.error("‚ùå Erreur lors du d√©marrage du quiz :", err);
  }
});




/**
 * Renvoie un √©l√©ment al√©atoire d‚Äôun tableau
 */
function randomItem(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// === Gestion du th√®me visuel du site ===
function applyTheme(mode) {
  document.documentElement.setAttribute("data-theme", mode);
  localStorage.setItem("selectedMode", mode);
}

async function applyAccroches(mode = "general") {
  try {
    // üîπ Si les textes ne sont pas encore charg√©s, on les charge une fois
    if (!window.TEXTS) {
      const response = await fetch("./data/texts.json");
      const allTexts = await response.json();
      const lang = window.currentLang || localStorage.getItem("lang") || "fr";
      window.TEXTS = allTexts[lang];
    }

    // üîπ R√©cup√®re le bloc du mode courant (depuis texts.json)
    const modeData =
      window.TEXTS?.accroches?.modes?.[mode] ||
      window.TEXTS?.accroches?.modes?.general;

    if (!modeData) {
      console.warn(`[i18n] Aucun bloc trouv√© pour le mode "${mode}"`);
      return;
    }

    // üîπ Applique le titre et le sous-titre dans le DOM
    const titre = randomItem(modeData.titres);
    const sousTitre = randomItem(modeData.sousTitres);

    const titleEl =
      document.getElementById("quizTitle") || document.getElementById("titre");
    const subTitleEl =
      document.getElementById("quizSubtitle") || document.getElementById("sousTitre");

    if (titleEl) titleEl.innerText = titre;
    if (subTitleEl) subTitleEl.innerText = sousTitre;

    // üîπ Sauvegarde les phrases de fin du mode
    window.currentComments = modeData.commentairesFin;
  } catch (err) {
    console.error("‚ùå Erreur lors du chargement des textes :", err);
  }
}


