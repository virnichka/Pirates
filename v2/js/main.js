
// ===============================================
// QUIZ ENTRE POTES ‚Äì main.js (version corrig√©e)
// * üöÄ Point d‚Äôentr√©e unique du quiz
// ===============================================

window.addEventListener("load", async () => {
  try {
    // 1Ô∏è‚É£ R√©cup√©ration du mode sauvegard√© (ou "general" par d√©faut)
    const savedMode = localStorage.getItem("selectedMode") || "general";

    // 2Ô∏è‚É£ Application du th√®me visuel et des accroches correspondantes
    applyTheme(savedMode);
    await applyAccroches(savedMode);

    // 3Ô∏è‚É£ Chargement des questions selon le mode choisi
    const questions = await fetchQuestions(savedMode);

    // 4Ô∏è‚É£ D√©marrage du quiz
    startQuiz(questions);

    // 5Ô∏è‚É£ Gestion du s√©lecteur de mode (liste d√©roulante)
    const select = document.getElementById("themeMode");
    if (select) {
      // initialise la valeur affich√©e dans la liste
      select.value = savedMode;

      // √©coute le changement de mode
      select.addEventListener("change", async (e) => {
        const mode = e.target.value;

        // üîπ 1. Sauvegarde le mode choisi
        localStorage.setItem("selectedMode", mode);

        // üîπ 2. Applique le th√®me visuel correspondant
        applyTheme(mode);

        // üîπ 3. Met √† jour les accroches (titres/sous-titres)
        await applyAccroches(mode);

        // üîπ 4. Recharge les questions du bon mode
        const newQuestions = await fetchQuestions(mode);

        // üîπ 5. Red√©marre le quiz avec les nouvelles questions
        if (newQuestions && newQuestions.length > 0) {
          startQuiz(newQuestions);
        } else {
          document.getElementById("quizQuestion").innerText =
            "Aucune question trouv√©e pour ce mode.";
        }
      });
    }
  } catch (err) {
    console.error("‚ùå Erreur lors du d√©marrage du quiz :", err);
  }
});


/**
 * Renvoie un √©l√©ment al√©atoire d‚Äôun tableau
 */
function randomItem(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// === Gestion du th√®me visuel du site ===
function applyTheme(mode) {
  document.documentElement.setAttribute("data-theme", mode);
  localStorage.setItem("selectedMode", mode);
}

// === Gestion des accroches dynamiques selon le mode ===
async function applyAccroches(mode) {
  try {
    const response = await fetch("data/accroches.json");
    const data = await response.json();

    const selectedMode = data.modes[mode] || data.modes[data._defaultMode];

    const titre = selectedMode.titres[Math.floor(Math.random() * selectedMode.titres.length)];
    const sousTitre = selectedMode.sousTitres[Math.floor(Math.random() * selectedMode.sousTitres.length)];

    const headerTitle = document.querySelector("header h1");
    const headerSubtitle = document.querySelector("header p");

    if (headerTitle) headerTitle.textContent = titre;
    if (headerSubtitle) headerSubtitle.textContent = sousTitre;
  } catch (err) {
    console.error("Erreur lors du chargement des accroches :", err);
  }
}
