// ===============================================
// QUIZ ENTRE POTES ‚Äì main.js (version enrichie)
// * üöÄ Point d‚Äôentr√©e unique du quiz
// * ‚è≥ Ajout : gestion visuelle de l‚Äô√©tat "Chargement"
// ===============================================

window.addEventListener("load", async () => {
  /* -----------------------------------------------------------
     üöÄ CHARGEMENT INITIAL DU SITE
     -----------------------------------------------------------
     Lors du premier chargement de la page :
     - affiche le message "Chargement‚Ä¶" dans le sous-titre
     - masque temporairement la zone principale du quiz
     - puis affiche le quiz une fois les donn√©es pr√™tes
  ----------------------------------------------------------- */
  setLoadingState(true); // ‚è≥ D√©but du chargement

  try {
    // 1Ô∏è‚É£ R√©cup√©ration du mode sauvegard√© (ou "general" par d√©faut)
    const savedMode = localStorage.getItem("selectedMode") || "general";

    // 2Ô∏è‚É£ Application du th√®me visuel et des accroches correspondantes
    applyTheme(savedMode);
    await applyAccroches(savedMode);

    // 3Ô∏è‚É£ Chargement des questions selon le mode choisi
    const questions = await fetchQuestions(savedMode);

    // 4Ô∏è‚É£ D√©marrage du quiz
    startQuiz(questions);

    // 5Ô∏è‚É£ Gestion du s√©lecteur de mode (liste d√©roulante)
    const select = document.getElementById("themeMode");
    if (select) {
      // initialise la valeur affich√©e dans la liste
      select.value = savedMode;

      /* -----------------------------------------------------------
         üéõÔ∏è CHANGEMENT DE MODE ‚Äî RECHARGEMENT DU QUIZ
         -----------------------------------------------------------
         Lorsqu‚Äôun mode est s√©lectionn√© depuis la liste :
         - affiche "Chargement‚Ä¶" et masque le quiz
         - applique le nouveau th√®me et les textes associ√©s
         - recharge les questions du mode choisi
         - relance le quiz avec les nouvelles donn√©es
      ----------------------------------------------------------- */
      select.addEventListener("change", async (e) => {
        const mode = e.target.value;

        setLoadingState(true); // ‚è≥ Affiche "Chargement‚Ä¶" et masque le quiz

        try {
          // üîπ 1. Sauvegarde le mode choisi
          localStorage.setItem("selectedMode", mode);

          // üîπ 2. Applique le th√®me visuel correspondant
          applyTheme(mode);

          // üîπ 3. Met √† jour les accroches (titres/sous-titres)
          await applyAccroches(mode);

          // üîπ 4. Recharge les questions du bon mode
          const newQuestions = await fetchQuestions(mode);

          // üîπ 5. Red√©marre le quiz avec les nouvelles questions
          if (newQuestions && newQuestions.length > 0) {
            startQuiz(newQuestions);
          } else {
            document.getElementById("quizQuestion").innerText =
              "Aucune question trouv√©e pour ce mode.";
          }
        } catch (error) {
          console.error("‚ùå Erreur lors du changement de mode :", error);
        } finally {
          setLoadingState(false); // ‚úÖ Fin du chargement : r√©affiche le quiz
        }
      });
    }
  } catch (err) {
    console.error("‚ùå Erreur lors du d√©marrage du quiz :", err);
  } finally {
    setLoadingState(false); // ‚úÖ Fin du chargement initial
  }
});
