/**
 * üéÆ Gestion du quiz
 */

let questions = [];
let currentQuestion = 0;
let score = 0;

/**
 * Lance le quiz avec une liste de questions
 */
function startQuiz(list) {
  // Les questions sont limit√©es et m√©lang√©es c√¥t√© serveur 
  questions = list;
  currentQuestion = 0;
  score = 0;

  // üîΩ On cache le bouton "Rejouer" d√®s qu'une nouvelle partie commence
  document.getElementById("restartBtn").style.display = "none";
  document.getElementById("nextBtn").style.display = "none";

  // Cela supprime le style d√®s qu‚Äôun nouveau quiz commence ‚Äî
  document.getElementById("quizQuestion").classList.remove("finished");
  document.getElementById("quizAnswers").classList.remove("finished");
  
  showQuestion();
}

/**
 * Affiche la question courante
 */
function showQuestion() {
  const q = questions[currentQuestion];
  const elQ = document.getElementById("quizQuestion");
  const elA = document.getElementById("quizAnswers");
  const nextBtn = document.getElementById("nextBtn");
  const commentaireEl = document.getElementById("miniCommentaire");


// üîÑ R√©initialise le commentaire/explication pr√©c√©dente
if (commentaireEl) {
  commentaireEl.style.display = "none";
  commentaireEl.textContent = "";
}



  // cache le bouton suivant
  if (nextBtn) nextBtn.style.display = "none";

  //  debog console vue question
  console.log("Question actuelle :", q);


  // üìù Affiche le texte de la question
  elQ.innerText = q.question;
  elA.innerHTML = "";

  // üß© 1. R√©cup√®re les mauvaises r√©ponses depuis la Google Sheet
  const wrongsRaw = Array.isArray(q.reponses)
    ? q.reponses
    : (typeof q.reponses === "string" ? q.reponses.split(";") : []);

  // üßπ 2. Nettoie les r√©ponses : trim, supprime les vides et les doublons
  const wrongs = wrongsRaw
    .map(r => String(r).trim())
    .filter(r => r.length && r.toLowerCase() !== String(q.bonne_reponse).trim().toLowerCase());


  // üé≤ 4. Combine la bonne r√©ponse + les mauvaises et m√©lange le tout
  const answers = shuffle([q.bonne_reponse, ...wrongs.slice(0, 3)]);

  // üß± 5. Cr√©e un bouton par r√©ponse
  answers.forEach(ans => {
    const btn = document.createElement("button");
    btn.className = "answerBtn";
    btn.textContent = ans;
    btn.onclick = () => checkAnswer(ans, q.bonne_reponse);
    elA.appendChild(btn);
  });
}

/**
 * V√©rifie la r√©ponse s√©lectionn√©e
 */
function checkAnswer(selected, correct) {
  const buttons = document.querySelectorAll(".answerBtn");
  buttons.forEach(b => {
    b.disabled = true;
    // Normalisation : tout en texte, sans espaces ni casse
const btnText = String(b.textContent).trim().toLowerCase();
const correctText = String(correct).trim().toLowerCase();
const selectedText = String(selected).trim().toLowerCase();

if (btnText === correctText) b.classList.add("correct");
else if (btnText === selectedText) b.classList.add("incorrect");

  });

  if (selected === correct) score++;
  document.getElementById("nextBtn").style.display = "block";
  
// üéì Affiche l'explication de la r√©ponse (si disponible)
const commentaireEl = document.getElementById("miniCommentaire");
const current = questions && questions[currentQuestion] ? questions[currentQuestion] : null;
if (!current || !commentaireEl) return;

const explication = current.explication;
if (explication) {
  commentaireEl.textContent = explication;
  commentaireEl.style.display = "block";
  commentaireEl.classList.add("visible");   // üëà rend visible avec fondu
} else {
  commentaireEl.classList.remove("visible"); // üëà cache si pas d'explication
  commentaireEl.style.display = "none";
}




}

/**
 * Passe √† la question suivante ou termine le quiz
 */
function nextQuestion() {
  const nextBtn = document.getElementById("nextBtn");
  
  // on cache le bouton suivant
  if (nextBtn) nextBtn.style.display = "none";
  
  currentQuestion++;
  if (currentQuestion < questions.length) showQuestion();
  else showFinalScore();
}

/**
 * üéØ Affiche le score final
 */
function showFinalScore() {
  const total = questions.length;
  const pourcentage = Math.round((score / total) * 100);
  const message = getCommentaire(pourcentage);

  // üßº Nettoyer le texte explicatif √† la fin du quiz
  const miniComment = document.getElementById("miniCommentaire");
  if (miniComment) {
    miniComment.innerText = "";
    miniComment.style.display = "none";
  }


  // üß© R√©cup√®re les textes de l'interface selon la langue
  const ui = window.TEXTS?.ui || {};

  // üß± Construit le contenu HTML √† afficher
  const html = `
    <div class="final-card">
      <h2>${ui.quizFinished || "Quiz termin√© üéâ"}</h2>
      <p><strong>${ui.youGot || "Tu as eu"} ${score}/${total} (${pourcentage}%)</strong></p>
      <p>${message}</p>
    </div>
  `;

  // üß© Injection dans le DOM
  const questionEl = document.getElementById("quizQuestion");
  const answersEl = document.getElementById("quizAnswers");

  if (questionEl) {
    questionEl.innerHTML = html;
    questionEl.classList.add("finished");
  }

  if (answersEl) answersEl.innerHTML = "";

  // üéÆ Boutons : on cache "Suivant", on affiche "Rejouer"
  document.getElementById("nextBtn").style.display = "none";
  document.getElementById("restartBtn").style.display = "block";

  // üèÜ Classement (optionnel)
  const nom = prompt(ui.enterName || "Entre ton nom pour le classement :");
  if (nom && nom.trim()) sendScore(nom.trim(), score, total);
}


/**
 * üîÑ Relance un nouveau quiz complet
 * Recharge les questions depuis le serveur avant de recommencer.
 */
async function restartQuiz() {
  try {
    const selectedMode = localStorage.getItem("selectedMode") || "general";
    const lang = localStorage.getItem("lang") || "fr";

    // üî§ R√©cup√©ration des textes selon la langue
    const uiTexts = (window.TEXTS && window.TEXTS.ui) || {};

    const loadingMsg = uiTexts.loading || "‚è≥ " + (uiTexts.loading || "Chargement du quiz...");
    const errorMsg = uiTexts.errorLoading || "Erreur lors du chargement du quiz üòï";
    const noQuestionsMsg = uiTexts.noQuestions || "Impossible de charger un nouveau quiz üòï";

    // üßº R√©initialise l‚Äôaffichage avant le rechargement
    const questionEl = document.getElementById("quizQuestion");
    const answersEl = document.getElementById("quizAnswers");
    const finalEl = document.getElementById("quizFinal");

    if (finalEl) finalEl.style.display = "none";
    if (questionEl) questionEl.innerText = loadingMsg;
    if (answersEl) answersEl.innerHTML = "";

    // üîÅ Recharge les questions depuis le script Google
    const newQuestions = await fetchQuestions(selectedMode);

    if (newQuestions && newQuestions.length > 0) {
      console.log(`‚úÖ Nouvelles questions charg√©es (${selectedMode}, ${lang})`);
      startQuiz(newQuestions);
    } else {
      questionEl.innerText = noQuestionsMsg;
    }

  } catch (err) {
    console.error("‚ùå Erreur lors du red√©marrage du quiz :", err);
    const uiTexts = (window.TEXTS && window.TEXTS.ui) || {};
    const errorMsg = uiTexts.errorLoading || "Erreur lors du rechargement du quiz.";
    const questionEl = document.getElementById("quizQuestion");
    if (questionEl) questionEl.innerText = errorMsg;
  }
}


